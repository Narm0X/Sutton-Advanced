/*
 * Copyright (c) peter.braun@fhws.de
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package de.fhws.fiw.fds.sutton.server.database.dbms.operations;

import de.fhws.fiw.fds.sutton.server.database.dbms.IPersistency;
import de.fhws.fiw.fds.sutton.server.database.results.AbstractResult;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * The AbstractLoadOperation class provides the required functionality to define the fundamental requirements to
 * perform all different kinds of loading data operations from a certain data table in the context of SQL databases
 * used by a Sutton application
 *
 * @param <R> the result received from the database after successfully executing the load operation
 * @param <P> the parameters to be used to load data from the database
 *
 * @see AbstractDatabaseOperation
 * */
public abstract class AbstractLoadOperation<P, R extends AbstractResult> extends AbstractDatabaseOperation<P, R>
{
	/**
	 * A precompiled SQL statement {@link PreparedStatement} that could be executed efficiently
	 * multiple times in the context of loading data from a certain database table
	 * */
	protected PreparedStatement databaseStatement;

	/**
	 * A {@link String} representing the SQL statement to be used to load data from a certain database table
	 * */
	protected String databaseSQLStatement;

	/**
	 * A table of data {@link ResultSet} representing a database result set, which is usually generated by executing
	 * a statement that queries the database.
	 * */
	protected ResultSet resultSet;

	/**
	 * The result {@link R} from loading data from a certain data table to send it in the response to the client
	 * */
	protected R queryResult;

	/**
	 * Constructs a load operation and assigns the given persistency instance as the database, in which
	 * the loading operation should be executed
	 * @param persistency the database instance to be used to persist data
	 * */
	public AbstractLoadOperation( final IPersistency persistency )
	{
		super( persistency );
	}

	@Override protected R executeDatabaseOperations( ) throws SQLException
	{
		createDatabaseSQLStatement( );

		createDatabaseStatement( );

		configureDatabaseStatement( );

		executeDatabaseStatement( );

		processResultSet( );

		closeResultSet( );

		closeDatabaseStatement( );

		return this.queryResult;
	}

	/**
	 * Defines the SQL statement to perform a loading operation and assigns it to
	 * {@link AbstractLoadOperation#databaseSQLStatement}
	 * */
	protected abstract void createDatabaseSQLStatement( ) throws SQLException;

	/**
	 * Creates a precompiled SQL statement to perform a loading operation and assigns it to
	 * {@link AbstractLoadOperation#databaseStatement}
	 * @throws SQLException if a database access error occurred or if the prepared statement
	 * was called on a closed connection to the database
	 * */
	protected void createDatabaseStatement( ) throws SQLException
	{
		this.databaseStatement = this.databaseConnection.prepareStatement( this.databaseSQLStatement );
	}

	/**
	 * Configures the SQL statement {@link AbstractLoadOperation#databaseSQLStatement} to prepare it to load data from a
	 * certain data table
	 * @throws SQLException if parameterIndex, where the placeholder should be replaced by the value to use it to load
	 * the data, does not correspond to a parameter marker in the SQL statement;
	 * if a database access error occurs or this method is called on a closed PreparedStatement
	 * */
	protected void configureDatabaseStatement( ) throws SQLException
	{
		setQueryParametersToPreparedStatement( );
	}

	/**
	 * Replaces the placeholder within the SQL statement {@link AbstractLoadOperation#databaseSQLStatement} by the
	 * values that should be used to load the data from a certain data table in the database.
	 * @throws if parameterIndex, where the placeholder should be replaced by the value to use it to load
	 * the data, does not correspond to a parameter marker in the SQL statement;
	 * if a database access error occurs or this method is called on a closed PreparedStatement
	 * */
	protected abstract void setQueryParametersToPreparedStatement( ) throws SQLException;

	/**
	 * Executes the loading operation and assigns the {@link AbstractLoadOperation#resultSet} to the loaded results
	 * @throws SQLException if a database access error occurred, or if the loading operation
	 * was called on a closed PreparedStatement, or if the execution of the load operation didn't
	 * return a ResultSet
	 * */
	protected void executeDatabaseStatement( ) throws SQLException
	{
		this.resultSet = this.databaseStatement.executeQuery( );
	}

	/**
	 * Processes the data table {@link AbstractLoadOperation#resultSet}, resulted after performing the loading
	 * operation, and converts its value/s to an instance of {@link AbstractResult} and assigns it to
	 * {@link AbstractLoadOperation#queryResult}
	 * @throws SQLException if a database access error occurs or while trying to read the values from
	 * {@link AbstractLoadOperation#resultSet} while it is closed
	 *
	 * */
	protected abstract void processResultSet( ) throws SQLException;

	/**
	 * Releases the data table {@link AbstractLoadOperation#resultSet} that was filled with the data loaded from
	 * the database
	 * @throws SQLException if a database access error occurred
	 * */
	protected void closeResultSet( ) throws SQLException
	{
		if ( this.resultSet != null )
		{
			this.resultSet.close( );
		}
	}

	/**
	 * Releases the prepared database statement {@link AbstractLoadOperation#databaseStatement} that is used
	 * to perform the loading operation
	 * @throws SQLException if a database access error occurred
	 * */
	protected void closeDatabaseStatement( ) throws SQLException
	{
		if ( this.databaseStatement != null )
		{
			this.databaseStatement.close( );
		}
	}
}
